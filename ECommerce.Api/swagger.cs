using ECommerce.Api.Api;
using ECommerce.Api.Client;
using ECommerce.Api.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RestSharp;
using SwaggerDateConverter = ECommerce.Api.Client.SwaggerDateConverter;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ChangePassword (ChangePasswordModel body = null);
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ChangePasswordWithHttpInfo (ChangePasswordModel body = null);
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>AuthResult</returns>
        AuthResult Login (LoginViewModel body = null);
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>ApiResponse of AuthResult</returns>
        ApiResponse<AuthResult> LoginWithHttpInfo (LoginViewModel body = null);
        /// <summary>
        /// Take input from user to register a new account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>AuthResult</returns>
        AuthResult Register (RegisterViewModel body = null);
        /// <summary>
        /// Take input from user to register a new account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>ApiResponse of AuthResult</returns>
        ApiResponse<AuthResult> RegisterWithHttpInfo (RegisterViewModel body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ChangePasswordAsync (ChangePasswordModel body = null);
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ChangePasswordAsyncWithHttpInfo (ChangePasswordModel body = null);
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>Task of AuthResult</returns>
        System.Threading.Tasks.Task<AuthResult> LoginAsync (LoginViewModel body = null);
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>Task of ApiResponse (AuthResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResult>> LoginAsyncWithHttpInfo (LoginViewModel body = null);
        /// <summary>
        /// Take input from user to register a new account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>Task of AuthResult</returns>
        System.Threading.Tasks.Task<AuthResult> RegisterAsync (RegisterViewModel body = null);
        /// <summary>
        /// Take input from user to register a new account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>Task of ApiResponse (AuthResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResult>> RegisterAsyncWithHttpInfo (RegisterViewModel body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthApi : IAuthApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ChangePassword (ChangePasswordModel body = null)
        {
             ApiResponse<bool?> localVarResponse = ChangePasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ChangePasswordWithHttpInfo (ChangePasswordModel body = null)
        {
            var localVarPath = "/api/Auth/password_change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ChangePasswordAsync (ChangePasswordModel body = null)
        {
             ApiResponse<bool?> localVarResponse = await ChangePasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Accepts a combination of user ID, current password and new password for password change. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ChangePasswordAsyncWithHttpInfo (ChangePasswordModel body = null)
        {
            var localVarPath = "/api/Auth/password_change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>AuthResult</returns>
        public AuthResult Login (LoginViewModel body = null)
        {
             ApiResponse<AuthResult> localVarResponse = LoginWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>ApiResponse of AuthResult</returns>
        public ApiResponse< AuthResult > LoginWithHttpInfo (LoginViewModel body = null)
        {
            var localVarPath = "/api/Auth/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<AuthResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthResult)));
        }
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>Task of AuthResult</returns>
        public async System.Threading.Tasks.Task<AuthResult> LoginAsync (LoginViewModel body = null)
        {
             ApiResponse<AuthResult> localVarResponse = await LoginAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Verify the combination of email and password to grant user access to use E-Mall. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provides the necessary email and password combination for authentication (optional)</param>
        /// <returns>Task of ApiResponse (AuthResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthResult>> LoginAsyncWithHttpInfo (LoginViewModel body = null)
        {
            var localVarPath = "/api/Auth/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<AuthResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthResult)));
        }
        /// <summary>
        /// Take input from user to register a new account 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>AuthResult</returns>
        public AuthResult Register (RegisterViewModel body = null)
        {
             ApiResponse<AuthResult> localVarResponse = RegisterWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Take input from user to register a new account 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>ApiResponse of AuthResult</returns>
        public ApiResponse< AuthResult > RegisterWithHttpInfo (RegisterViewModel body = null)
        {
            var localVarPath = "/api/Auth/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<AuthResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthResult)));
        }
        /// <summary>
        /// Take input from user to register a new account 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>Task of AuthResult</returns>
        public async System.Threading.Tasks.Task<AuthResult> RegisterAsync (RegisterViewModel body = null)
        {
             ApiResponse<AuthResult> localVarResponse = await RegisterAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Take input from user to register a new account 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Provide necessary information for registering a new user in the database (optional)</param>
        /// <returns>Task of ApiResponse (AuthResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthResult>> RegisterAsyncWithHttpInfo (RegisterViewModel body = null)
        {
            var localVarPath = "/api/Auth/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<AuthResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthResult)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICartsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Object</returns>
        Object Add (CartItem body = null);
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddWithHttpInfo (CartItem body = null);
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Object</returns>
        Object Delete (long? id);
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>List&lt;CartItem&gt;</returns>
        List<CartItem> GetAll (string userId);
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of List&lt;CartItem&gt;</returns>
        ApiResponse<List<CartItem>> GetAllWithHttpInfo (string userId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>CartItem</returns>
        CartItem GetCartItemBasedOnCartId (long? cartId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>ApiResponse of CartItem</returns>
        ApiResponse<CartItem> GetCartItemBasedOnCartIdWithHttpInfo (long? cartId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>CartItem</returns>
        CartItem GetCartItemBasedOnUserIdAndProductId (string userId, long? productId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>ApiResponse of CartItem</returns>
        ApiResponse<CartItem> GetCartItemBasedOnUserIdAndProductIdWithHttpInfo (string userId, long? productId);
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>int?</returns>
        int? GetCount (string userId);
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> GetCountWithHttpInfo (string userId);
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Object</returns>
        Object Update (long? id, CartItem body = null);
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (long? id, CartItem body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddAsync (CartItem body = null);
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (CartItem body = null);
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAsync (long? id);
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of List&lt;CartItem&gt;</returns>
        System.Threading.Tasks.Task<List<CartItem>> GetAllAsync (string userId);
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (List&lt;CartItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CartItem>>> GetAllAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>Task of CartItem</returns>
        System.Threading.Tasks.Task<CartItem> GetCartItemBasedOnCartIdAsync (long? cartId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>Task of ApiResponse (CartItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartItem>> GetCartItemBasedOnCartIdAsyncWithHttpInfo (long? cartId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>Task of CartItem</returns>
        System.Threading.Tasks.Task<CartItem> GetCartItemBasedOnUserIdAndProductIdAsync (string userId, long? productId);
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>Task of ApiResponse (CartItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartItem>> GetCartItemBasedOnUserIdAndProductIdAsyncWithHttpInfo (string userId, long? productId);
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> GetCountAsync (string userId);
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> GetCountAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (long? id, CartItem body = null);
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? id, CartItem body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CartsApi : ICartsApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartsApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CartsApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartsApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Object</returns>
        public Object Add (CartItem body = null)
        {
             ApiResponse<Object> localVarResponse = AddWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddWithHttpInfo (CartItem body = null)
        {
            var localVarPath = "/api/Carts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddAsync (CartItem body = null)
        {
             ApiResponse<Object> localVarResponse = await AddAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add an item to a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Cart Item ID (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (CartItem body = null)
        {
            var localVarPath = "/api/Carts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Object</returns>
        public Object Delete (long? id)
        {
             ApiResponse<Object> localVarResponse = DeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CartsApi->Delete");
            var localVarPath = "/api/Carts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAsync (long? id)
        {
             ApiResponse<Object> localVarResponse = await DeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Remove an item from user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CartsApi->Delete");
            var localVarPath = "/api/Carts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>List&lt;CartItem&gt;</returns>
        public List<CartItem> GetAll (string userId)
        {
             ApiResponse<List<CartItem>> localVarResponse = GetAllWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of List&lt;CartItem&gt;</returns>
        public ApiResponse< List<CartItem> > GetAllWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetAll");
            var localVarPath = "/api/Carts/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<CartItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CartItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartItem>)));
        }
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of List&lt;CartItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<CartItem>> GetAllAsync (string userId)
        {
             ApiResponse<List<CartItem>> localVarResponse = await GetAllAsyncWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all the items in the shopping cart of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (List&lt;CartItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CartItem>>> GetAllAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetAll");
            var localVarPath = "/api/Carts/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<CartItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CartItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartItem>)));
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>CartItem</returns>
        public CartItem GetCartItemBasedOnCartId (long? cartId)
        {
             ApiResponse<CartItem> localVarResponse = GetCartItemBasedOnCartIdWithHttpInfo(cartId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>ApiResponse of CartItem</returns>
        public ApiResponse< CartItem > GetCartItemBasedOnCartIdWithHttpInfo (long? cartId)
        {
            // verify the required parameter 'cartId' is set
            if (cartId == null)
                throw new ApiException(400, "Missing required parameter 'cartId' when calling CartsApi->GetCartItemBasedOnCartId");
            var localVarPath = "/api/Carts/details/{cartId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (cartId != null) localVarPathParams.Add("cartId", this.Configuration.ApiClient.ParameterToString(cartId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartItemBasedOnCartId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CartItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CartItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartItem)));
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>Task of CartItem</returns>
        public async System.Threading.Tasks.Task<CartItem> GetCartItemBasedOnCartIdAsync (long? cartId)
        {
             ApiResponse<CartItem> localVarResponse = await GetCartItemBasedOnCartIdAsyncWithHttpInfo(cartId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on cart item ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId"></param>
        /// <returns>Task of ApiResponse (CartItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartItem>> GetCartItemBasedOnCartIdAsyncWithHttpInfo (long? cartId)
        {
            // verify the required parameter 'cartId' is set
            if (cartId == null)
                throw new ApiException(400, "Missing required parameter 'cartId' when calling CartsApi->GetCartItemBasedOnCartId");
            var localVarPath = "/api/Carts/details/{cartId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (cartId != null) localVarPathParams.Add("cartId", this.Configuration.ApiClient.ParameterToString(cartId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartItemBasedOnCartId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CartItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CartItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartItem)));
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>CartItem</returns>
        public CartItem GetCartItemBasedOnUserIdAndProductId (string userId, long? productId)
        {
             ApiResponse<CartItem> localVarResponse = GetCartItemBasedOnUserIdAndProductIdWithHttpInfo(userId, productId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>ApiResponse of CartItem</returns>
        public ApiResponse< CartItem > GetCartItemBasedOnUserIdAndProductIdWithHttpInfo (string userId, long? productId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetCartItemBasedOnUserIdAndProductId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling CartsApi->GetCartItemBasedOnUserIdAndProductId");
            var localVarPath = "/api/Carts/{userId}/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartItemBasedOnUserIdAndProductId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CartItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CartItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartItem)));
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>Task of CartItem</returns>
        public async System.Threading.Tasks.Task<CartItem> GetCartItemBasedOnUserIdAndProductIdAsync (string userId, long? productId)
        {
             ApiResponse<CartItem> localVarResponse = await GetCartItemBasedOnUserIdAndProductIdAsyncWithHttpInfo(userId, productId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve the details of a specific cart item based on user ID and product ID. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="productId">Product ID</param>
        /// <returns>Task of ApiResponse (CartItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartItem>> GetCartItemBasedOnUserIdAndProductIdAsyncWithHttpInfo (string userId, long? productId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetCartItemBasedOnUserIdAndProductId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling CartsApi->GetCartItemBasedOnUserIdAndProductId");
            var localVarPath = "/api/Carts/{userId}/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartItemBasedOnUserIdAndProductId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CartItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CartItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartItem)));
        }
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>int?</returns>
        public int? GetCount (string userId)
        {
             ApiResponse<int?> localVarResponse = GetCountWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > GetCountWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetCount");
            var localVarPath = "/api/Carts/count/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> GetCountAsync (string userId)
        {
             ApiResponse<int?> localVarResponse = await GetCountAsyncWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrive the total number of items in a user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> GetCountAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartsApi->GetCount");
            var localVarPath = "/api/Carts/count/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Object</returns>
        public Object Update (long? id, CartItem body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (long? id, CartItem body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CartsApi->Update");
            var localVarPath = "/api/Carts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (long? id, CartItem body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an item (e.g. count) in user&#x27;s shopping cart. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cart Item ID</param>
        /// <param name="body">Cart Item Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? id, CartItem body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CartsApi->Update");
            var localVarPath = "/api/Carts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICategoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>bool?</returns>
        bool? Add (Category body = null);
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> AddWithHttpInfo (Category body = null);
        /// <summary>
        /// Remove an existing category from database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Object</returns>
        Object Delete (long? id, string userId);
        /// <summary>
        /// Remove an existing category from database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWithHttpInfo (long? id, string userId);
        /// <summary>
        /// Retrieve a specific category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Category</returns>
        Category Get (long? id);
        /// <summary>
        /// Retrieve a specific category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> GetWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve all existing categories in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> GetAll ();
        /// <summary>
        /// Retrieve all existing categories in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> GetAllWithHttpInfo ();
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>bool?</returns>
        bool? Update (long? id, Category body = null);
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWithHttpInfo (long? id, Category body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> AddAsync (Category body = null);
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> AddAsyncWithHttpInfo (Category body = null);
        /// <summary>
        /// Remove an existing category from database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAsync (long? id, string userId);
        /// <summary>
        /// Remove an existing category from database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id, string userId);
        /// <summary>
        /// Retrieve a specific category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> GetAsync (long? id);
        /// <summary>
        /// Retrieve a specific category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> GetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Retrieve all existing categories in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> GetAllAsync ();
        /// <summary>
        /// Retrieve all existing categories in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> GetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateAsync (long? id, Category body = null);
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateAsyncWithHttpInfo (long? id, Category body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CategoriesApi : ICategoriesApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CategoriesApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>bool?</returns>
        public bool? Add (Category body = null)
        {
             ApiResponse<bool?> localVarResponse = AddWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > AddWithHttpInfo (Category body = null)
        {
            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> AddAsync (Category body = null)
        {
             ApiResponse<bool?> localVarResponse = await AddAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add a new category to the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> AddAsyncWithHttpInfo (Category body = null)
        {
            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
        /// <summary>
        /// Remove an existing category from database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Object</returns>
        public Object Delete (long? id, string userId)
        {
             ApiResponse<Object> localVarResponse = DeleteWithHttpInfo(id, userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Remove an existing category from database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteWithHttpInfo (long? id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Delete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CategoriesApi->Delete");
            var localVarPath = "/api/Categories/{userId}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Remove an existing category from database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAsync (long? id, string userId)
        {
             ApiResponse<Object> localVarResponse = await DeleteAsyncWithHttpInfo(id, userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Remove an existing category from database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Delete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CategoriesApi->Delete");
            var localVarPath = "/api/Categories/{userId}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Retrieve a specific category. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Category</returns>
        public Category Get (long? id)
        {
             ApiResponse<Category> localVarResponse = GetWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific category. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > GetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Get");
            var localVarPath = "/api/Categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }
        /// <summary>
        /// Retrieve a specific category. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> GetAsync (long? id)
        {
             ApiResponse<Category> localVarResponse = await GetAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific category. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> GetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Get");
            var localVarPath = "/api/Categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }
        /// <summary>
        /// Retrieve all existing categories in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> GetAll ()
        {
             ApiResponse<List<Category>> localVarResponse = GetAllWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all existing categories in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public ApiResponse< List<Category> > GetAllWithHttpInfo ()
        {
            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }
        /// <summary>
        /// Retrieve all existing categories in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> GetAllAsync ()
        {
             ApiResponse<List<Category>> localVarResponse = await GetAllAsyncWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all existing categories in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Category>>> GetAllAsyncWithHttpInfo ()
        {
            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>bool?</returns>
        public bool? Update (long? id, Category body = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWithHttpInfo (long? id, Category body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Update");
            var localVarPath = "/api/Categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateAsync (long? id, Category body = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing category in the database. This checks for duplicate category name. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <param name="body">Category Object (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateAsyncWithHttpInfo (long? id, Category body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->Update");
            var localVarPath = "/api/Categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Order</returns>
        Order Create (ShoppingCartVM body = null);
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateWithHttpInfo (ShoppingCartVM body = null);
        /// <summary>
        /// Get all orders of a specific status for a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> GetAllOrdersForUserById (string userId, string status);
        /// <summary>
        /// Get all orders of a specific status for a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> GetAllOrdersForUserByIdWithHttpInfo (string userId, string status);
        /// <summary>
        /// Get all orders of a specific status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> GetAllOrdersOfStatus (string status);
        /// <summary>
        /// Get all orders of a specific status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> GetAllOrdersOfStatusWithHttpInfo (string status);
        /// <summary>
        /// Retrieve a specific order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Order</returns>
        Order GetOrderById (long? orderId);
        /// <summary>
        /// Retrieve a specific order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderByIdWithHttpInfo (long? orderId);
        /// <summary>
        /// Retrieve a specific order and its order items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderDetailsVM</returns>
        OrderDetailsVM GetOrderDetailsByOrderId (long? orderId);
        /// <summary>
        /// Retrieve a specific order and its order items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderDetailsVM</returns>
        ApiResponse<OrderDetailsVM> GetOrderDetailsByOrderIdWithHttpInfo (long? orderId);
        /// <summary>
        /// Update an existing order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object Update (long? orderId, Order body = null);
        /// <summary>
        /// Update an existing order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (long? orderId, Order body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> CreateAsync (ShoppingCartVM body = null);
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> CreateAsyncWithHttpInfo (ShoppingCartVM body = null);
        /// <summary>
        /// Get all orders of a specific status for a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> GetAllOrdersForUserByIdAsync (string userId, string status);
        /// <summary>
        /// Get all orders of a specific status for a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> GetAllOrdersForUserByIdAsyncWithHttpInfo (string userId, string status);
        /// <summary>
        /// Get all orders of a specific status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> GetAllOrdersOfStatusAsync (string status);
        /// <summary>
        /// Get all orders of a specific status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> GetAllOrdersOfStatusAsyncWithHttpInfo (string status);
        /// <summary>
        /// Retrieve a specific order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderByIdAsync (long? orderId);
        /// <summary>
        /// Retrieve a specific order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderByIdAsyncWithHttpInfo (long? orderId);
        /// <summary>
        /// Retrieve a specific order and its order items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderDetailsVM</returns>
        System.Threading.Tasks.Task<OrderDetailsVM> GetOrderDetailsByOrderIdAsync (long? orderId);
        /// <summary>
        /// Retrieve a specific order and its order items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderDetailsVM)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailsVM>> GetOrderDetailsByOrderIdAsyncWithHttpInfo (long? orderId);
        /// <summary>
        /// Update an existing order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (long? orderId, Order body = null);
        /// <summary>
        /// Update an existing order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? orderId, Order body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrdersApi : IOrdersApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrdersApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Order</returns>
        public Order Create (ShoppingCartVM body = null)
        {
             ApiResponse<Order> localVarResponse = CreateWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > CreateWithHttpInfo (ShoppingCartVM body = null)
        {
            var localVarPath = "/api/Orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> CreateAsync (ShoppingCartVM body = null)
        {
             ApiResponse<Order> localVarResponse = await CreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Create an order from a user&#x27;s shopping cart upon place order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Shopping Cart Object (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> CreateAsyncWithHttpInfo (ShoppingCartVM body = null)
        {
            var localVarPath = "/api/Orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }
        /// <summary>
        /// Get all orders of a specific status for a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> GetAllOrdersForUserById (string userId, string status)
        {
             ApiResponse<List<Order>> localVarResponse = GetAllOrdersForUserByIdWithHttpInfo(userId, status);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all orders of a specific status for a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > GetAllOrdersForUserByIdWithHttpInfo (string userId, string status)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrdersApi->GetAllOrdersForUserById");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OrdersApi->GetAllOrdersForUserById");
            var localVarPath = "/api/Orders/user/{userId}/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (status != null) localVarPathParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrdersForUserById", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }
        /// <summary>
        /// Get all orders of a specific status for a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> GetAllOrdersForUserByIdAsync (string userId, string status)
        {
             ApiResponse<List<Order>> localVarResponse = await GetAllOrdersForUserByIdAsyncWithHttpInfo(userId, status);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all orders of a specific status for a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> GetAllOrdersForUserByIdAsyncWithHttpInfo (string userId, string status)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrdersApi->GetAllOrdersForUserById");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OrdersApi->GetAllOrdersForUserById");
            var localVarPath = "/api/Orders/user/{userId}/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (status != null) localVarPathParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrdersForUserById", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }
        /// <summary>
        /// Get all orders of a specific status. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> GetAllOrdersOfStatus (string status)
        {
             ApiResponse<List<Order>> localVarResponse = GetAllOrdersOfStatusWithHttpInfo(status);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all orders of a specific status. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > GetAllOrdersOfStatusWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OrdersApi->GetAllOrdersOfStatus");
            var localVarPath = "/api/Orders/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (status != null) localVarPathParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrdersOfStatus", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }
        /// <summary>
        /// Get all orders of a specific status. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> GetAllOrdersOfStatusAsync (string status)
        {
             ApiResponse<List<Order>> localVarResponse = await GetAllOrdersOfStatusAsyncWithHttpInfo(status);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all orders of a specific status. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> GetAllOrdersOfStatusAsyncWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OrdersApi->GetAllOrdersOfStatus");
            var localVarPath = "/api/Orders/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (status != null) localVarPathParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOrdersOfStatus", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }
        /// <summary>
        /// Retrieve a specific order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Order</returns>
        public Order GetOrderById (long? orderId)
        {
             ApiResponse<Order> localVarResponse = GetOrderByIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > GetOrderByIdWithHttpInfo (long? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderById");
            var localVarPath = "/api/Orders/summary/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }
        /// <summary>
        /// Retrieve a specific order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderByIdAsync (long? orderId)
        {
             ApiResponse<Order> localVarResponse = await GetOrderByIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderByIdAsyncWithHttpInfo (long? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderById");
            var localVarPath = "/api/Orders/summary/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }
        /// <summary>
        /// Retrieve a specific order and its order items. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderDetailsVM</returns>
        public OrderDetailsVM GetOrderDetailsByOrderId (long? orderId)
        {
             ApiResponse<OrderDetailsVM> localVarResponse = GetOrderDetailsByOrderIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific order and its order items. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderDetailsVM</returns>
        public ApiResponse< OrderDetailsVM > GetOrderDetailsByOrderIdWithHttpInfo (long? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderDetailsByOrderId");
            var localVarPath = "/api/Orders/details/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetailsByOrderId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<OrderDetailsVM>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderDetailsVM) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDetailsVM)));
        }
        /// <summary>
        /// Retrieve a specific order and its order items. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderDetailsVM</returns>
        public async System.Threading.Tasks.Task<OrderDetailsVM> GetOrderDetailsByOrderIdAsync (long? orderId)
        {
             ApiResponse<OrderDetailsVM> localVarResponse = await GetOrderDetailsByOrderIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a specific order and its order items. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderDetailsVM)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDetailsVM>> GetOrderDetailsByOrderIdAsyncWithHttpInfo (long? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderDetailsByOrderId");
            var localVarPath = "/api/Orders/details/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetailsByOrderId", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<OrderDetailsVM>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderDetailsVM) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDetailsVM)));
        }
        /// <summary>
        /// Update an existing order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object Update (long? orderId, Order body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(orderId, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (long? orderId, Order body = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->Update");
            var localVarPath = "/api/Orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Update an existing order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (long? orderId, Order body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(orderId, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing order. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? orderId, Order body = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->Update");
            var localVarPath = "/api/Orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new product to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Object</returns>
        Object Add (ProductViewModel body = null);
        /// <summary>
        /// Add a new product to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddWithHttpInfo (ProductViewModel body = null);
        /// <summary>
        /// Mark a product as not available instead of truly deleting it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Object</returns>
        Object Delete (long? id, string userId);
        /// <summary>
        /// Mark a product as not available instead of truly deleting it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWithHttpInfo (long? id, string userId);
        /// <summary>
        /// Get a specific product from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ProductViewModel</returns>
        ProductViewModel Get (long? id);
        /// <summary>
        /// Get a specific product from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ApiResponse of ProductViewModel</returns>
        ApiResponse<ProductViewModel> GetWithHttpInfo (long? id);
        /// <summary>
        /// Get all products from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductViewModel&gt;</returns>
        List<ProductViewModel> GetAll ();
        /// <summary>
        /// Get all products from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductViewModel&gt;</returns>
        ApiResponse<List<ProductViewModel>> GetAllWithHttpInfo ();
        /// <summary>
        /// Update an existing product in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Object</returns>
        Object Update (long? id, ProductViewModel body = null);
        /// <summary>
        /// Update an existing product in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (long? id, ProductViewModel body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new product to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddAsync (ProductViewModel body = null);
        /// <summary>
        /// Add a new product to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (ProductViewModel body = null);
        /// <summary>
        /// Mark a product as not available instead of truly deleting it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAsync (long? id, string userId);
        /// <summary>
        /// Mark a product as not available instead of truly deleting it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id, string userId);
        /// <summary>
        /// Get a specific product from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ProductViewModel</returns>
        System.Threading.Tasks.Task<ProductViewModel> GetAsync (long? id);
        /// <summary>
        /// Get a specific product from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ApiResponse (ProductViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductViewModel>> GetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get all products from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProductViewModel>> GetAllAsync ();
        /// <summary>
        /// Get all products from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductViewModel>>> GetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Update an existing product in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (long? id, ProductViewModel body = null);
        /// <summary>
        /// Update an existing product in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? id, ProductViewModel body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProductsApi : IProductsApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProductsApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Add a new product to the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Object</returns>
        public Object Add (ProductViewModel body = null)
        {
             ApiResponse<Object> localVarResponse = AddWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add a new product to the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddWithHttpInfo (ProductViewModel body = null)
        {
            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Add a new product to the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddAsync (ProductViewModel body = null)
        {
             ApiResponse<Object> localVarResponse = await AddAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Add a new product to the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (ProductViewModel body = null)
        {
            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Mark a product as not available instead of truly deleting it. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Object</returns>
        public Object Delete (long? id, string userId)
        {
             ApiResponse<Object> localVarResponse = DeleteWithHttpInfo(id, userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Mark a product as not available instead of truly deleting it. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteWithHttpInfo (long? id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Delete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductsApi->Delete");
            var localVarPath = "/api/Products/{userId}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Mark a product as not available instead of truly deleting it. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAsync (long? id, string userId)
        {
             ApiResponse<Object> localVarResponse = await DeleteAsyncWithHttpInfo(id, userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Mark a product as not available instead of truly deleting it. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (long? id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Delete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductsApi->Delete");
            var localVarPath = "/api/Products/{userId}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Get a specific product from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ProductViewModel</returns>
        public ProductViewModel Get (long? id)
        {
             ApiResponse<ProductViewModel> localVarResponse = GetWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get a specific product from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ApiResponse of ProductViewModel</returns>
        public ApiResponse< ProductViewModel > GetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Get");
            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<ProductViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductViewModel)));
        }
        /// <summary>
        /// Get a specific product from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ProductViewModel</returns>
        public async System.Threading.Tasks.Task<ProductViewModel> GetAsync (long? id)
        {
             ApiResponse<ProductViewModel> localVarResponse = await GetAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get a specific product from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ApiResponse (ProductViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductViewModel>> GetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Get");
            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<ProductViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductViewModel)));
        }
        /// <summary>
        /// Get all products from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductViewModel&gt;</returns>
        public List<ProductViewModel> GetAll ()
        {
             ApiResponse<List<ProductViewModel>> localVarResponse = GetAllWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all products from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductViewModel&gt;</returns>
        public ApiResponse< List<ProductViewModel> > GetAllWithHttpInfo ()
        {
            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<ProductViewModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductViewModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductViewModel>)));
        }
        /// <summary>
        /// Get all products from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductViewModel>> GetAllAsync ()
        {
             ApiResponse<List<ProductViewModel>> localVarResponse = await GetAllAsyncWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get all products from the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductViewModel>>> GetAllAsyncWithHttpInfo ()
        {
            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<ProductViewModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductViewModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductViewModel>)));
        }
        /// <summary>
        /// Update an existing product in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Object</returns>
        public Object Update (long? id, ProductViewModel body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing product in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (long? id, ProductViewModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Update");
            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Update an existing product in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (long? id, ProductViewModel body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing product in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <param name="body">ProductViewModel Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? id, ProductViewModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->Update");
            var localVarPath = "/api/Products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStatusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Just to check if the API server is up.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string Index ();
        /// <summary>
        /// Just to check if the API server is up.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IndexWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Just to check if the API server is up.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IndexAsync ();
        /// <summary>
        /// Just to check if the API server is up.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IndexAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StatusApi : IStatusApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class
        /// </summary>
        /// <returns></returns>
        public StatusApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatusApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Just to check if the API server is up. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string Index ()
        {
             ApiResponse<string> localVarResponse = IndexWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Just to check if the API server is up. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IndexWithHttpInfo ()
        {
            var localVarPath = "/api/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Index", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }
        /// <summary>
        /// Just to check if the API server is up. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IndexAsync ()
        {
             ApiResponse<string> localVarResponse = await IndexAsyncWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Just to check if the API server is up. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IndexAsyncWithHttpInfo ()
        {
            var localVarPath = "/api/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Index", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the details of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApplicationUser</returns>
        ApplicationUser Get (string userId);
        /// <summary>
        /// Get the details of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of ApplicationUser</returns>
        ApiResponse<ApplicationUser> GetWithHttpInfo (string userId);
        /// <summary>
        /// Retrieve all users from the database based on role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>List&lt;ApplicationUser&gt;</returns>
        List<ApplicationUser> GetAll (string role);
        /// <summary>
        /// Retrieve all users from the database based on role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>ApiResponse of List&lt;ApplicationUser&gt;</returns>
        ApiResponse<List<ApplicationUser>> GetAllWithHttpInfo (string role);
        /// <summary>
        /// Update an existing user in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Object</returns>
        Object Update (ApplicationUser body = null);
        /// <summary>
        /// Update an existing user in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (ApplicationUser body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the details of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApplicationUser</returns>
        System.Threading.Tasks.Task<ApplicationUser> GetAsync (string userId);
        /// <summary>
        /// Get the details of a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (ApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUser>> GetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Retrieve all users from the database based on role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>Task of List&lt;ApplicationUser&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationUser>> GetAllAsync (string role);
        /// <summary>
        /// Retrieve all users from the database based on role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationUser>>> GetAllAsyncWithHttpInfo (string role);
        /// <summary>
        /// Update an existing user in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (ApplicationUser body = null);
        /// <summary>
        /// Update an existing user in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (ApplicationUser body = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private ECommerce.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new ECommerce.Api.Client.Configuration { BasePath = basePath };
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = ECommerce.Api.Client.Configuration.Default;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(ECommerce.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ECommerce.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = ECommerce.Api.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ECommerce.Api.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ECommerce.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Get the details of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApplicationUser</returns>
        public ApplicationUser Get (string userId)
        {
             ApiResponse<ApplicationUser> localVarResponse = GetWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get the details of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of ApplicationUser</returns>
        public ApiResponse< ApplicationUser > GetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->Get");
            var localVarPath = "/api/Users/info/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<ApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUser)));
        }
        /// <summary>
        /// Get the details of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApplicationUser</returns>
        public async System.Threading.Tasks.Task<ApplicationUser> GetAsync (string userId)
        {
             ApiResponse<ApplicationUser> localVarResponse = await GetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Get the details of a specific user. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (ApplicationUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUser>> GetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->Get");
            var localVarPath = "/api/Users/info/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<ApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUser)));
        }
        /// <summary>
        /// Retrieve all users from the database based on role. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>List&lt;ApplicationUser&gt;</returns>
        public List<ApplicationUser> GetAll (string role)
        {
             ApiResponse<List<ApplicationUser>> localVarResponse = GetAllWithHttpInfo(role);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all users from the database based on role. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>ApiResponse of List&lt;ApplicationUser&gt;</returns>
        public ApiResponse< List<ApplicationUser> > GetAllWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling UsersApi->GetAll");
            var localVarPath = "/api/Users/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<ApplicationUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ApplicationUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationUser>)));
        }
        /// <summary>
        /// Retrieve all users from the database based on role. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>Task of List&lt;ApplicationUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationUser>> GetAllAsync (string role)
        {
             ApiResponse<List<ApplicationUser>> localVarResponse = await GetAllAsyncWithHttpInfo(role);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve all users from the database based on role. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Role string, e.g. Admin, Customer</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationUser>>> GetAllAsyncWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling UsersApi->GetAll");
            var localVarPath = "/api/Users/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<ApplicationUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ApplicationUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationUser>)));
        }
        /// <summary>
        /// Update an existing user in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Object</returns>
        public Object Update (ApplicationUser body = null)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing user in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (ApplicationUser body = null)
        {
            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Update an existing user in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (ApplicationUser body = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update an existing user in the database. 
        /// </summary>
        /// <exception cref="ECommerce.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ApplicationUser Object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (ApplicationUser body = null)
        {
            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
        public partial class ApiClient
    {
        private JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);
        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        public ApiClient()
        {
            Configuration = ECommerce.Api.Client.Configuration.Default;
            RestClient = new RestClient("/");
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path (/).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        public ApiClient(Configuration config)
        {
            Configuration = config ?? ECommerce.Api.Client.Configuration.Default;
            RestClient = new RestClient(Configuration.BasePath);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(String basePath = "/")
        {
           if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            RestClient = new RestClient(basePath);
            Configuration = Client.Configuration.Default;
        }
        /// <summary>
        /// Gets or sets the default API client for making HTTP calls.
        /// </summary>
        /// <value>The default API client.</value>
        [Obsolete("ApiClient.Default is deprecated, please use 'Configuration.Default.ApiClient' instead.")]
        public static ApiClient Default;
        /// <summary>
        /// Gets or sets an instance of the IReadableConfiguration.
        /// </summary>
        /// <value>An instance of the IReadableConfiguration.</value>
        /// <remarks>
        /// <see cref="IReadableConfiguration"/> helps us to avoid modifying possibly global
        /// configuration values from within a given client. It does not guarantee thread-safety
        /// of the <see cref="Configuration"/> instance in any way.
        /// </remarks>
        public IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        public RestClient RestClient { get; set; }
        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = new RestRequest(path, method);
            // add path parameter, if any
            foreach(var param in pathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);
            // add header parameter, if any
            foreach(var param in headerParams)
                request.AddHeader(param.Key, param.Value);
            // add query parameter, if any
            foreach(var param in queryParams)
                request.AddQueryParameter(param.Key, param.Value);
            // add form parameter, if any
            foreach(var param in formParams)
                request.AddParameter(param.Key, param.Value);
            // add file parameter, if any
            foreach(var param in fileParams)
            {
                request.AddFile(param.Value.Name, param.Value.Writer, param.Value.FileName, param.Value.ContentType);
            }
            if (postBody != null) // http body (model or byte[]) parameter
            {
                request.AddParameter(contentType, postBody, ParameterType.RequestBody);
            }
            return request;
        }
        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content Type of the request</param>
        /// <returns>Object</returns>
        public Object CallApi(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            // set timeout
            RestClient.Timeout = Configuration.Timeout;
            // set user agent
            RestClient.UserAgent = Configuration.UserAgent;
            InterceptRequest(request);
            var response = RestClient.Execute(request);
            InterceptResponse(request, response);
            return (Object) response;
        }
        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<Object> CallApiAsync(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            InterceptRequest(request);
            var response = await RestClient.ExecuteTaskAsync(request);
            InterceptResponse(request, response);
            return (Object)response;
        }
        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">String to be escaped.</param>
        /// <returns>Escaped string.</returns>
        public string EscapeString(string str)
        {
            return UrlEncode(str);
        }
        /// <summary>
        /// Create FileParameter based on Stream.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="stream">Input stream.</param>
        /// <returns>FileParameter.</returns>
        public FileParameter ParameterToFile(string name, Stream stream)
        {
            if (stream is FileStream)
                return FileParameter.Create(name, ReadAsBytes(stream), Path.GetFileName(((FileStream)stream).Name));
            else
                return FileParameter.Create(name, ReadAsBytes(stream), "no_file_name_provided");
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            if (obj is DateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTime)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is DateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTimeOffset)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is IList)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in (IList)obj)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
                return Convert.ToString (obj);
        }
        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public object Deserialize(IRestResponse response, Type type)
        {
            IList<Parameter> headers = response.Headers;
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }
            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                if (headers != null)
                {
                    var filePath = String.IsNullOrEmpty(Configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : Configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, response.RawBytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(response.RawBytes);
                return stream;
            }
            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content,  null, System.Globalization.DateTimeStyles.RoundtripKind);
            }
            if (type == typeof(String) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return ConvertType(response.Content, type);
            }
            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public String Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj) : null;
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        ///Check if the given MIME is a JSON MIME.
        ///JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public bool IsJsonMime(String mime)
        {
            var jsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
            return mime != null && (jsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json"));
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public String SelectHeaderContentType(String[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return "application/json";
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType.ToLower()))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public String SelectHeaderAccept(String[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return String.Join(",", accepts);
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">String to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Dynamically cast the object into target type.
        /// </summary>
        /// <param name="fromObject">Object to be casted</param>
        /// <param name="toObject">Target type</param>
        /// <returns>Casted object</returns>
        public static dynamic ConvertType(dynamic fromObject, Type toObject)
        {
            return Convert.ChangeType(fromObject, toObject);
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            byte[] buf = new byte[16*1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int count;
                while ((count = inputStream.Read(buf, 0, buf.Length)) > 0)
                {
                    ms.Write(buf, 0, count);
                }
                return ms.ToArray();
            }
        }
        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }
            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;
            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);
                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }
            return sb.ToString();
        }
        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            else
            {
                return filename;
            }
        }
        /// <summary>
        /// Convert params to key/value pairs. 
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A list of KeyValuePairs</returns>
        public IEnumerable<KeyValuePair<string, string>> ParameterToKeyValuePairs(string collectionFormat, string name, object value)
        {
            var parameters = new List<KeyValuePair<string, string>>();
            if (IsCollection(value) && collectionFormat == "multi")
            {
                var valueCollection = value as IEnumerable;
                parameters.AddRange(from object item in valueCollection select new KeyValuePair<string, string>(name, ParameterToString(item)));
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>(name, ParameterToString(value)));
            }
            return parameters;
        }
        /// <summary>
        /// Check if generic object is a collection.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>True if object is a collection type</returns>
        private static bool IsCollection(object value)
        {
            return value is IList || value is ICollection;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
        public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }
        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public dynamic ErrorContent { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() {}
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        public ApiException(int errorCode, string message, dynamic errorContent = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// API Response
    /// </summary>
        public class ApiResponse<T>
    {
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public int StatusCode { get; private set; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public IDictionary<string, string> Headers { get; private set; }
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse&lt;T&gt;" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(int statusCode, IDictionary<string, string> headers, T data)
        {
            this.StatusCode= statusCode;
            this.Headers = headers;
            this.Data = data;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
        public class Configuration : IReadableConfiguration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "1.0.0";
        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";
        #endregion Constants
        #region Static Members
        private static readonly object GlobalConfigSync = new { };
        private static Configuration _globalConfiguration;
        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.Content),
                    response.Content);
            }
            if (status == 0)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.ErrorMessage), response.ErrorMessage);
            }
            return null;
        };
        /// <summary>
        /// Gets or sets the default Configuration.
        /// </summary>
        /// <value>Configuration.</value>
        public static Configuration Default
        {
            get { return _globalConfiguration; }
            set
            {
                lock (GlobalConfigSync)
                {
                    _globalConfiguration = value;
                }
            }
        }
        #endregion Static Members
        #region Private Members
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey = null;
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix = null;
        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        #endregion Private Members
        #region Constructors
        static Configuration()
        {
            _globalConfiguration = new GlobalConfiguration();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration()
        {
            UserAgent = "Swagger-Codegen/1.0.0/csharp";
            BasePath = "/";
            DefaultHeader = new ConcurrentDictionary<string, string>();
            ApiKey = new ConcurrentDictionary<string, string>();
            ApiKeyPrefix = new ConcurrentDictionary<string, string>();
            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration(
            IDictionary<string, string> defaultHeader,
            IDictionary<string, string> apiKey,
            IDictionary<string, string> apiKeyPrefix,
            string basePath = "/") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");
            if (defaultHeader == null)
                throw new ArgumentNullException("defaultHeader");
            if (apiKey == null)
                throw new ArgumentNullException("apiKey");
            if (apiKeyPrefix == null)
                throw new ArgumentNullException("apiKeyPrefix");
            BasePath = basePath;
            foreach (var keyValuePair in defaultHeader)
            {
                DefaultHeader.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKey)
            {
                ApiKey.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKeyPrefix)
            {
                ApiKeyPrefix.Add(keyValuePair);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class with different settings
        /// </summary>
        /// <param name="apiClient">Api client</param>
        /// <param name="defaultHeader">Dictionary of default HTTP header</param>
        /// <param name="username">Username</param>
        /// <param name="password">Password</param>
        /// <param name="accessToken">accessToken</param>
        /// <param name="apiKey">Dictionary of API key</param>
        /// <param name="apiKeyPrefix">Dictionary of API key prefix</param>
        /// <param name="tempFolderPath">Temp folder path</param>
        /// <param name="dateTimeFormat">DateTime format string</param>
        /// <param name="timeout">HTTP connection timeout (in milliseconds)</param>
        /// <param name="userAgent">HTTP user agent</param>
        [Obsolete("Use explicit object construction and setting of properties.", true)]
        public Configuration(
            // ReSharper disable UnusedParameter.Local
            ApiClient apiClient = null,
            IDictionary<string, string> defaultHeader = null,
            string username = null,
            string password = null,
            string accessToken = null,
            IDictionary<string, string> apiKey = null,
            IDictionary<string, string> apiKeyPrefix = null,
            string tempFolderPath = null,
            string dateTimeFormat = null,
            int timeout = 100000,
            string userAgent = "Swagger-Codegen/1.0.0/csharp"
            // ReSharper restore UnusedParameter.Local
            )
        {
        }
        /// <summary>
        /// Initializes a new instance of the Configuration class.
        /// </summary>
        /// <param name="apiClient">Api client.</param>
        [Obsolete("This constructor caused unexpected sharing of static data. It is no longer supported.", true)]
        // ReSharper disable once UnusedParameter.Local
        public Configuration(ApiClient apiClient)
        {
        }
        #endregion Constructors
        #region Properties
        private ApiClient _apiClient = null;
        /// <summary>
        /// Gets an instance of an ApiClient for this configuration
        /// </summary>
        public virtual ApiClient ApiClient
        {
            get
            {
                if (_apiClient == null) _apiClient = CreateApiClient();
                return _apiClient;
            }
        }
        private String _basePath = null;
        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath {
            get { return _basePath; }
            set {
                _basePath = value;
                // pass-through to ApiClient if it's set.
                if(_apiClient != null) {
                    _apiClient.RestClient.BaseUrl = new Uri(_basePath);
                }
            }
        }
        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeader { get; set; }
        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout
        {
            get { return ApiClient.RestClient.Timeout; }
            set { ApiClient.RestClient.Timeout = value; }
        }
        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }
        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }
        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            var apiKeyValue = "";
            ApiKey.TryGetValue (apiKeyIdentifier, out apiKeyValue);
            var apiKeyPrefix = "";
            if (ApiKeyPrefix.TryGetValue (apiKeyIdentifier, out apiKeyPrefix))
                return apiKeyPrefix + " " + apiKeyValue;
            else
                return apiKeyValue;
        }
        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Possible breaking change since swagger-codegen 2.2.1, enforce a valid temporary path on set.
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }
        /// <summary>
        /// Gets or sets the the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }
                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        #endregion Properties
        #region Methods
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        public void AddDefaultHeader(string key, string value)
        {
            DefaultHeader[key] = value;
        }
        /// <summary>
        /// Creates a new <see cref="ApiClient" /> based on this <see cref="Configuration" /> instance.
        /// </summary>
        /// <returns></returns>
        public ApiClient CreateApiClient()
        {
            return new ApiClient(BasePath) { Configuration = this };
        }
        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static String ToDebugReport()
        {
            String report = "C# SDK (ECommerce.Api) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version  + "\n";
            report += "    Version of the API: v1\n";
            report += "    SDK Package Version: 1.0.0\n";
            return report;
        }
        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }
        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }
        #endregion Methods
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// A delegate to ExceptionFactory method
    /// </summary>
    /// <param name="methodName">Method name</param>
    /// <param name="response">Response</param>
    /// <returns>Exceptions</returns>
        public delegate Exception ExceptionFactory(string methodName, IRestResponse response);
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// <see cref="GlobalConfiguration"/> provides a compile-time extension point for globally configuring
    /// API Clients.
    /// </summary>
    /// <remarks>
    /// A customized implementation via partial class may reside in another file and may
    /// be excluded from automatic generation via a .swagger-codegen-ignore file.
    /// </remarks>
    public partial class GlobalConfiguration : Configuration
    {
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// Represents configuration aspects required to interact with the API endpoints.
    /// </summary>
        public interface IApiAccessor
    {
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        Configuration Configuration {get; set;}
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        String GetBasePath();
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        ExceptionFactory ExceptionFactory { get; set; }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }
        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }
        /// <summary>
        /// Gets the base path.
        /// </summary>
        /// <value>Base path.</value>
        string BasePath { get; }
        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time foramt.</value>
        string DateTimeFormat { get; }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        IDictionary<string, string> DefaultHeader { get; }
        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }
        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int Timeout { get; }
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }
        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }
        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Client
{
    /// <summary>
    /// Formatter for 'date' swagger formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
    /// </summary>
    public class SwaggerDateConverter : IsoDateTimeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerDateConverter" /> class.
        /// </summary>
        public SwaggerDateConverter()
        {
            // full-date   = date-fullyear "-" date-month "-" date-mday
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// ApplicationUser
    /// </summary>
    [DataContract]
        public partial class ApplicationUser :  IEquatable<ApplicationUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUser" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="address">address.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="role">role.</param>
        /// <param name="id">id.</param>
        /// <param name="userName">userName.</param>
        /// <param name="normalizedUserName">normalizedUserName.</param>
        /// <param name="email">email.</param>
        /// <param name="normalizedEmail">normalizedEmail.</param>
        /// <param name="emailConfirmed">emailConfirmed.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="securityStamp">securityStamp.</param>
        /// <param name="concurrencyStamp">concurrencyStamp.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneNumberConfirmed">phoneNumberConfirmed.</param>
        /// <param name="twoFactorEnabled">twoFactorEnabled.</param>
        /// <param name="lockoutEnd">lockoutEnd.</param>
        /// <param name="lockoutEnabled">lockoutEnabled.</param>
        /// <param name="accessFailedCount">accessFailedCount.</param>
        public ApplicationUser(string name = default(string), string address = default(string), string createdBy = default(string), DateTime? createdAt = default(DateTime?), string role = default(string), string id = default(string), string userName = default(string), string normalizedUserName = default(string), string email = default(string), string normalizedEmail = default(string), bool? emailConfirmed = default(bool?), string passwordHash = default(string), string securityStamp = default(string), string concurrencyStamp = default(string), string phoneNumber = default(string), bool? phoneNumberConfirmed = default(bool?), bool? twoFactorEnabled = default(bool?), DateTime? lockoutEnd = default(DateTime?), bool? lockoutEnabled = default(bool?), int? accessFailedCount = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApplicationUser and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Address = address;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.Role = role;
            this.Id = id;
            this.UserName = userName;
            this.NormalizedUserName = normalizedUserName;
            this.Email = email;
            this.NormalizedEmail = normalizedEmail;
            this.EmailConfirmed = emailConfirmed;
            this.PasswordHash = passwordHash;
            this.SecurityStamp = securityStamp;
            this.ConcurrencyStamp = concurrencyStamp;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberConfirmed = phoneNumberConfirmed;
            this.TwoFactorEnabled = twoFactorEnabled;
            this.LockoutEnd = lockoutEnd;
            this.LockoutEnabled = lockoutEnabled;
            this.AccessFailedCount = accessFailedCount;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets NormalizedUserName
        /// </summary>
        [DataMember(Name="normalizedUserName", EmitDefaultValue=false)]
        public string NormalizedUserName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets NormalizedEmail
        /// </summary>
        [DataMember(Name="normalizedEmail", EmitDefaultValue=false)]
        public string NormalizedEmail { get; set; }
        /// <summary>
        /// Gets or Sets EmailConfirmed
        /// </summary>
        [DataMember(Name="emailConfirmed", EmitDefaultValue=false)]
        public bool? EmailConfirmed { get; set; }
        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name="passwordHash", EmitDefaultValue=false)]
        public string PasswordHash { get; set; }
        /// <summary>
        /// Gets or Sets SecurityStamp
        /// </summary>
        [DataMember(Name="securityStamp", EmitDefaultValue=false)]
        public string SecurityStamp { get; set; }
        /// <summary>
        /// Gets or Sets ConcurrencyStamp
        /// </summary>
        [DataMember(Name="concurrencyStamp", EmitDefaultValue=false)]
        public string ConcurrencyStamp { get; set; }
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Gets or Sets PhoneNumberConfirmed
        /// </summary>
        [DataMember(Name="phoneNumberConfirmed", EmitDefaultValue=false)]
        public bool? PhoneNumberConfirmed { get; set; }
        /// <summary>
        /// Gets or Sets TwoFactorEnabled
        /// </summary>
        [DataMember(Name="twoFactorEnabled", EmitDefaultValue=false)]
        public bool? TwoFactorEnabled { get; set; }
        /// <summary>
        /// Gets or Sets LockoutEnd
        /// </summary>
        [DataMember(Name="lockoutEnd", EmitDefaultValue=false)]
        public DateTime? LockoutEnd { get; set; }
        /// <summary>
        /// Gets or Sets LockoutEnabled
        /// </summary>
        [DataMember(Name="lockoutEnabled", EmitDefaultValue=false)]
        public bool? LockoutEnabled { get; set; }
        /// <summary>
        /// Gets or Sets AccessFailedCount
        /// </summary>
        [DataMember(Name="accessFailedCount", EmitDefaultValue=false)]
        public int? AccessFailedCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationUser {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
            sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
            sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
            sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
            sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
            sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUser);
        }
        /// <summary>
        /// Returns true if ApplicationUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUser input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.NormalizedUserName == input.NormalizedUserName ||
                    (this.NormalizedUserName != null &&
                    this.NormalizedUserName.Equals(input.NormalizedUserName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.NormalizedEmail == input.NormalizedEmail ||
                    (this.NormalizedEmail != null &&
                    this.NormalizedEmail.Equals(input.NormalizedEmail))
                ) && 
                (
                    this.EmailConfirmed == input.EmailConfirmed ||
                    (this.EmailConfirmed != null &&
                    this.EmailConfirmed.Equals(input.EmailConfirmed))
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.SecurityStamp == input.SecurityStamp ||
                    (this.SecurityStamp != null &&
                    this.SecurityStamp.Equals(input.SecurityStamp))
                ) && 
                (
                    this.ConcurrencyStamp == input.ConcurrencyStamp ||
                    (this.ConcurrencyStamp != null &&
                    this.ConcurrencyStamp.Equals(input.ConcurrencyStamp))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberConfirmed == input.PhoneNumberConfirmed ||
                    (this.PhoneNumberConfirmed != null &&
                    this.PhoneNumberConfirmed.Equals(input.PhoneNumberConfirmed))
                ) && 
                (
                    this.TwoFactorEnabled == input.TwoFactorEnabled ||
                    (this.TwoFactorEnabled != null &&
                    this.TwoFactorEnabled.Equals(input.TwoFactorEnabled))
                ) && 
                (
                    this.LockoutEnd == input.LockoutEnd ||
                    (this.LockoutEnd != null &&
                    this.LockoutEnd.Equals(input.LockoutEnd))
                ) && 
                (
                    this.LockoutEnabled == input.LockoutEnabled ||
                    (this.LockoutEnabled != null &&
                    this.LockoutEnabled.Equals(input.LockoutEnabled))
                ) && 
                (
                    this.AccessFailedCount == input.AccessFailedCount ||
                    (this.AccessFailedCount != null &&
                    this.AccessFailedCount.Equals(input.AccessFailedCount))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.NormalizedUserName != null)
                    hashCode = hashCode * 59 + this.NormalizedUserName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.NormalizedEmail != null)
                    hashCode = hashCode * 59 + this.NormalizedEmail.GetHashCode();
                if (this.EmailConfirmed != null)
                    hashCode = hashCode * 59 + this.EmailConfirmed.GetHashCode();
                if (this.PasswordHash != null)
                    hashCode = hashCode * 59 + this.PasswordHash.GetHashCode();
                if (this.SecurityStamp != null)
                    hashCode = hashCode * 59 + this.SecurityStamp.GetHashCode();
                if (this.ConcurrencyStamp != null)
                    hashCode = hashCode * 59 + this.ConcurrencyStamp.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PhoneNumberConfirmed != null)
                    hashCode = hashCode * 59 + this.PhoneNumberConfirmed.GetHashCode();
                if (this.TwoFactorEnabled != null)
                    hashCode = hashCode * 59 + this.TwoFactorEnabled.GetHashCode();
                if (this.LockoutEnd != null)
                    hashCode = hashCode * 59 + this.LockoutEnd.GetHashCode();
                if (this.LockoutEnabled != null)
                    hashCode = hashCode * 59 + this.LockoutEnabled.GetHashCode();
                if (this.AccessFailedCount != null)
                    hashCode = hashCode * 59 + this.AccessFailedCount.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// AuthResult
    /// </summary>
    [DataContract]
        public partial class AuthResult :  IEquatable<AuthResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthResult" /> class.
        /// </summary>
        /// <param name="applicationUser">applicationUser.</param>
        /// <param name="statusCode">statusCode.</param>
        /// <param name="message">message.</param>
        public AuthResult(ApplicationUser applicationUser = default(ApplicationUser), int? statusCode = default(int?), List<string> message = default(List<string>))
        {
            this.ApplicationUser = applicationUser;
            this.StatusCode = statusCode;
            this.Message = message;
        }
        /// <summary>
        /// Gets or Sets ApplicationUser
        /// </summary>
        [DataMember(Name="applicationUser", EmitDefaultValue=false)]
        public ApplicationUser ApplicationUser { get; set; }
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public List<string> Message { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthResult {\n");
            sb.Append("  ApplicationUser: ").Append(ApplicationUser).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthResult);
        }
        /// <summary>
        /// Returns true if AuthResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthResult input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.ApplicationUser == input.ApplicationUser ||
                    (this.ApplicationUser != null &&
                    this.ApplicationUser.Equals(input.ApplicationUser))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Message == input.Message ||
                    this.Message != null &&
                    input.Message != null &&
                    this.Message.SequenceEqual(input.Message)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationUser != null)
                    hashCode = hashCode * 59 + this.ApplicationUser.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// CartItem
    /// </summary>
    [DataContract]
        public partial class CartItem :  IEquatable<CartItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="applicationUser">applicationUser.</param>
        /// <param name="productId">productId.</param>
        /// <param name="product">product.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="price">price.</param>
        public CartItem(long? id = default(long?), string userId = default(string), ApplicationUser applicationUser = default(ApplicationUser), long? productId = default(long?), Product product = default(Product), int? quantity = default(int?), double? price = default(double?))
        {
            this.Id = id;
            this.UserId = userId;
            this.ApplicationUser = applicationUser;
            this.ProductId = productId;
            this.Product = product;
            this.Quantity = quantity;
            this.Price = price;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets ApplicationUser
        /// </summary>
        [DataMember(Name="applicationUser", EmitDefaultValue=false)]
        public ApplicationUser ApplicationUser { get; set; }
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public long? ProductId { get; set; }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ApplicationUser: ").Append(ApplicationUser).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItem);
        }
        /// <summary>
        /// Returns true if CartItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItem input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ApplicationUser == input.ApplicationUser ||
                    (this.ApplicationUser != null &&
                    this.ApplicationUser.Equals(input.ApplicationUser))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ApplicationUser != null)
                    hashCode = hashCode * 59 + this.ApplicationUser.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract]
        public partial class Category :  IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Category(long? id = default(long?), string name = default(string), string createdBy = default(string), DateTime? createdAt = default(DateTime?), string updatedBy = default(string), DateTime? updatedAt = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Category and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Id = id;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.UpdatedBy = updatedBy;
            this.UpdatedAt = updatedAt;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }
        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// ChangePasswordModel
    /// </summary>
    [DataContract]
        public partial class ChangePasswordModel :  IEquatable<ChangePasswordModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordModel" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="currentPassword">currentPassword (required).</param>
        /// <param name="newPassword">newPassword (required).</param>
        /// <param name="confirmNewPassword">confirmNewPassword (required).</param>
        public ChangePasswordModel(string userId = default(string), string currentPassword = default(string), string newPassword = default(string), string confirmNewPassword = default(string))
        {
            // to ensure "currentPassword" is required (not null)
            if (currentPassword == null)
            {
                throw new InvalidDataException("currentPassword is a required property for ChangePasswordModel and cannot be null");
            }
            else
            {
                this.CurrentPassword = currentPassword;
            }
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new InvalidDataException("newPassword is a required property for ChangePasswordModel and cannot be null");
            }
            else
            {
                this.NewPassword = newPassword;
            }
            // to ensure "confirmNewPassword" is required (not null)
            if (confirmNewPassword == null)
            {
                throw new InvalidDataException("confirmNewPassword is a required property for ChangePasswordModel and cannot be null");
            }
            else
            {
                this.ConfirmNewPassword = confirmNewPassword;
            }
            this.UserId = userId;
        }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets CurrentPassword
        /// </summary>
        [DataMember(Name="currentPassword", EmitDefaultValue=false)]
        public string CurrentPassword { get; set; }
        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        [DataMember(Name="newPassword", EmitDefaultValue=false)]
        public string NewPassword { get; set; }
        /// <summary>
        /// Gets or Sets ConfirmNewPassword
        /// </summary>
        [DataMember(Name="confirmNewPassword", EmitDefaultValue=false)]
        public string ConfirmNewPassword { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePasswordModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  ConfirmNewPassword: ").Append(ConfirmNewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePasswordModel);
        }
        /// <summary>
        /// Returns true if ChangePasswordModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePasswordModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePasswordModel input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CurrentPassword == input.CurrentPassword ||
                    (this.CurrentPassword != null &&
                    this.CurrentPassword.Equals(input.CurrentPassword))
                ) && 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                ) && 
                (
                    this.ConfirmNewPassword == input.ConfirmNewPassword ||
                    (this.ConfirmNewPassword != null &&
                    this.ConfirmNewPassword.Equals(input.ConfirmNewPassword))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CurrentPassword != null)
                    hashCode = hashCode * 59 + this.CurrentPassword.GetHashCode();
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                if (this.ConfirmNewPassword != null)
                    hashCode = hashCode * 59 + this.ConfirmNewPassword.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// LoginViewModel
    /// </summary>
    [DataContract]
        public partial class LoginViewModel :  IEquatable<LoginViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginViewModel" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="rememberMe">rememberMe.</param>
        public LoginViewModel(string email = default(string), string password = default(string), bool? rememberMe = default(bool?))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for LoginViewModel and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for LoginViewModel and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            this.RememberMe = rememberMe;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets RememberMe
        /// </summary>
        [DataMember(Name="rememberMe", EmitDefaultValue=false)]
        public bool? RememberMe { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginViewModel {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RememberMe: ").Append(RememberMe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginViewModel);
        }
        /// <summary>
        /// Returns true if LoginViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginViewModel input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RememberMe == input.RememberMe ||
                    (this.RememberMe != null &&
                    this.RememberMe.Equals(input.RememberMe))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RememberMe != null)
                    hashCode = hashCode * 59 + this.RememberMe.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
        public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="user">user.</param>
        /// <param name="orderDate">orderDate (required).</param>
        /// <param name="paymentDate">paymentDate.</param>
        /// <param name="shipDate">shipDate (required).</param>
        /// <param name="orderTotal">orderTotal (required).</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="orderStatus">orderStatus.</param>
        /// <param name="paymentStatus">paymentStatus.</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="name">name (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="shippingAddress">shippingAddress (required).</param>
        /// <param name="billingAddress">billingAddress (required).</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="orderActionId">orderActionId.</param>
        public Order(long? id = default(long?), string userId = default(string), ApplicationUser user = default(ApplicationUser), DateTime? orderDate = default(DateTime?), DateTime? paymentDate = default(DateTime?), DateTime? shipDate = default(DateTime?), double? orderTotal = default(double?), string trackingNumber = default(string), string carrier = default(string), string orderStatus = default(string), string paymentStatus = default(string), string transactionId = default(string), string name = default(string), string email = default(string), string shippingAddress = default(string), string billingAddress = default(string), string phoneNumber = default(string), string updatedBy = default(string), DateTime? updatedAt = default(DateTime?), long? orderActionId = default(long?))
        {
            // to ensure "orderDate" is required (not null)
            if (orderDate == null)
            {
                throw new InvalidDataException("orderDate is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderDate = orderDate;
            }
            // to ensure "shipDate" is required (not null)
            if (shipDate == null)
            {
                throw new InvalidDataException("shipDate is a required property for Order and cannot be null");
            }
            else
            {
                this.ShipDate = shipDate;
            }
            // to ensure "orderTotal" is required (not null)
            if (orderTotal == null)
            {
                throw new InvalidDataException("orderTotal is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderTotal = orderTotal;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Order and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Order and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "shippingAddress" is required (not null)
            if (shippingAddress == null)
            {
                throw new InvalidDataException("shippingAddress is a required property for Order and cannot be null");
            }
            else
            {
                this.ShippingAddress = shippingAddress;
            }
            // to ensure "billingAddress" is required (not null)
            if (billingAddress == null)
            {
                throw new InvalidDataException("billingAddress is a required property for Order and cannot be null");
            }
            else
            {
                this.BillingAddress = billingAddress;
            }
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new InvalidDataException("phoneNumber is a required property for Order and cannot be null");
            }
            else
            {
                this.PhoneNumber = phoneNumber;
            }
            this.Id = id;
            this.UserId = userId;
            this.User = user;
            this.PaymentDate = paymentDate;
            this.TrackingNumber = trackingNumber;
            this.Carrier = carrier;
            this.OrderStatus = orderStatus;
            this.PaymentStatus = paymentStatus;
            this.TransactionId = transactionId;
            this.UpdatedBy = updatedBy;
            this.UpdatedAt = updatedAt;
            this.OrderActionId = orderActionId;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public ApplicationUser User { get; set; }
        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }
        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }
        /// <summary>
        /// Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name="shipDate", EmitDefaultValue=false)]
        public DateTime? ShipDate { get; set; }
        /// <summary>
        /// Gets or Sets OrderTotal
        /// </summary>
        [DataMember(Name="orderTotal", EmitDefaultValue=false)]
        public double? OrderTotal { get; set; }
        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }
        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }
        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }
        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name="paymentStatus", EmitDefaultValue=false)]
        public string PaymentStatus { get; set; }
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public string ShippingAddress { get; set; }
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public string BillingAddress { get; set; }
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Gets or Sets OrderActionId
        /// </summary>
        [DataMember(Name="orderActionId", EmitDefaultValue=false)]
        public long? OrderActionId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OrderActionId: ").Append(OrderActionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }
        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.OrderActionId == input.OrderActionId ||
                    (this.OrderActionId != null &&
                    this.OrderActionId.Equals(input.OrderActionId))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.OrderActionId != null)
                    hashCode = hashCode * 59 + this.OrderActionId.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// OrderDetailsVM
    /// </summary>
    [DataContract]
        public partial class OrderDetailsVM :  IEquatable<OrderDetailsVM>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailsVM" /> class.
        /// </summary>
        /// <param name="order">order.</param>
        /// <param name="orderItems">orderItems.</param>
        public OrderDetailsVM(Order order = default(Order), List<OrderItem> orderItems = default(List<OrderItem>))
        {
            this.Order = order;
            this.OrderItems = orderItems;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Gets or Sets OrderItems
        /// </summary>
        [DataMember(Name="orderItems", EmitDefaultValue=false)]
        public List<OrderItem> OrderItems { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDetailsVM {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDetailsVM);
        }
        /// <summary>
        /// Returns true if OrderDetailsVM instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDetailsVM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDetailsVM input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.OrderItems == input.OrderItems ||
                    this.OrderItems != null &&
                    input.OrderItems != null &&
                    this.OrderItems.SequenceEqual(input.OrderItems)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.OrderItems != null)
                    hashCode = hashCode * 59 + this.OrderItems.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
        public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="order">order.</param>
        /// <param name="productId">productId (required).</param>
        /// <param name="product">product.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="price">price.</param>
        public OrderItem(long? id = default(long?), long? orderId = default(long?), Order order = default(Order), long? productId = default(long?), Product product = default(Product), int? quantity = default(int?), double? price = default(double?))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new InvalidDataException("productId is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.ProductId = productId;
            }
            this.Id = id;
            this.Order = order;
            this.Product = product;
            this.Quantity = quantity;
            this.Price = price;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public long? OrderId { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public long? ProductId { get; set; }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }
        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
        public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="price">price (required).</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="isAvailable">isAvailable.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Product(long? id = default(long?), string name = default(string), string description = default(string), double? price = default(double?), string imageUrl = default(string), bool? isAvailable = default(bool?), string createdBy = default(string), DateTime? createdAt = default(DateTime?), string updatedBy = default(string), DateTime? updatedAt = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Product and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for Product and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            this.Id = id;
            this.Description = description;
            this.ImageUrl = imageUrl;
            this.IsAvailable = isAvailable;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.UpdatedBy = updatedBy;
            this.UpdatedAt = updatedAt;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Gets or Sets IsAvailable
        /// </summary>
        [DataMember(Name="isAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }
        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.IsAvailable == input.IsAvailable ||
                    (this.IsAvailable != null &&
                    this.IsAvailable.Equals(input.IsAvailable))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.IsAvailable != null)
                    hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// ProductViewModel
    /// </summary>
    [DataContract]
        public partial class ProductViewModel :  IEquatable<ProductViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductViewModel" /> class.
        /// </summary>
        /// <param name="product">product.</param>
        /// <param name="categories">categories.</param>
        /// <param name="categoryIds">categoryIds (required).</param>
        public ProductViewModel(Product product = default(Product), List<string> categories = default(List<string>), List<long?> categoryIds = default(List<long?>))
        {
            // to ensure "categoryIds" is required (not null)
            if (categoryIds == null)
            {
                throw new InvalidDataException("categoryIds is a required property for ProductViewModel and cannot be null");
            }
            else
            {
                this.CategoryIds = categoryIds;
            }
            this.Product = product;
            this.Categories = categories;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }
        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [DataMember(Name="categoryIds", EmitDefaultValue=false)]
        public List<long?> CategoryIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductViewModel {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductViewModel);
        }
        /// <summary>
        /// Returns true if ProductViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductViewModel input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.CategoryIds != null)
                    hashCode = hashCode * 59 + this.CategoryIds.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// RegisterViewModel
    /// </summary>
    [DataContract]
        public partial class RegisterViewModel :  IEquatable<RegisterViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterViewModel" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="confirmPassword">confirmPassword.</param>
        /// <param name="name">name (required).</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="address">address.</param>
        /// <param name="role">role.</param>
        public RegisterViewModel(string email = default(string), string password = default(string), string confirmPassword = default(string), string name = default(string), string phoneNumber = default(string), string address = default(string), string role = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for RegisterViewModel and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for RegisterViewModel and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for RegisterViewModel and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new InvalidDataException("phoneNumber is a required property for RegisterViewModel and cannot be null");
            }
            else
            {
                this.PhoneNumber = phoneNumber;
            }
            this.ConfirmPassword = confirmPassword;
            this.Address = address;
            this.Role = role;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets ConfirmPassword
        /// </summary>
        [DataMember(Name="confirmPassword", EmitDefaultValue=false)]
        public string ConfirmPassword { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterViewModel {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ConfirmPassword: ").Append(ConfirmPassword).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterViewModel);
        }
        /// <summary>
        /// Returns true if RegisterViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterViewModel input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ConfirmPassword == input.ConfirmPassword ||
                    (this.ConfirmPassword != null &&
                    this.ConfirmPassword.Equals(input.ConfirmPassword))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ConfirmPassword != null)
                    hashCode = hashCode * 59 + this.ConfirmPassword.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * E-Mall API
 *
 * A simple Web API build based on ASP.NET Core 3.1
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace ECommerce.Api.Model
{
    /// <summary>
    /// ShoppingCartVM
    /// </summary>
    [DataContract]
        public partial class ShoppingCartVM :  IEquatable<ShoppingCartVM>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingCartVM" /> class.
        /// </summary>
        /// <param name="cartItems">cartItems.</param>
        /// <param name="order">order.</param>
        public ShoppingCartVM(List<CartItem> cartItems = default(List<CartItem>), Order order = default(Order))
        {
            this.CartItems = cartItems;
            this.Order = order;
        }
        /// <summary>
        /// Gets or Sets CartItems
        /// </summary>
        [DataMember(Name="cartItems", EmitDefaultValue=false)]
        public List<CartItem> CartItems { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShoppingCartVM {\n");
            sb.Append("  CartItems: ").Append(CartItems).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingCartVM);
        }
        /// <summary>
        /// Returns true if ShoppingCartVM instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingCartVM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingCartVM input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.CartItems == input.CartItems ||
                    this.CartItems != null &&
                    input.CartItems != null &&
                    this.CartItems.SequenceEqual(input.CartItems)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartItems != null)
                    hashCode = hashCode * 59 + this.CartItems.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
